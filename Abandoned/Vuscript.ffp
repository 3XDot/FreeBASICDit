#VisualFreeBasic_Project#  Version=5.3.5
NumObjects=5
ProjectName=Dust
CompilationMode=0
CompilationDebug=0
FunNameNumber=0
CharSet=1
CodePage=936
ProjectType=GUI
UseGDIPlus=0
ShowConsole=-1
MultiLanguage=0
OmitInformation=0
UseStartupIcon=-1
StartupIcon=30001.ico|ICON_30001
UseWinXPthemes=0
StrUnicode=-1
UseAdminPriv=0
DeleteGeneratedCode=-1
AddCompOps=
LastRunFilename=Dust32.exe
ImageManager=30001.ico|ICON|0
ImageManager=
Major=1
Minor=5
Revision=5
Build=520
FileMajor=1
FileMinor=5
FileRevision=5
FileBuild=520
AutoIncrement=-1
DefaultCompiler=32
Comments=BULID:20200723520
CompanyName=
FileDescription=
LegalCopyrights=
LegalTrademarks=
ProductName=

[Objects]
Module=.\modules\dust_var.inc|0|235||True|
Module=.\modules\dust_errshow.Inc|6|1532||True|

TopTab=#FF_WinMain#|True|0|141|5229
TopTab=#FF_AppStart#|False|0|15|1976
TopTab=#FF_PumpHook#|False|0|0|84
TopTab=.\modules\dust_var.inc|False|0|0|235
TopTab=.\modules\dust_errshow.Inc|False|0|20|1532
#END_MAIN_PROPERTIES#









[FF_APPSTART_START]
'这里是打开软件后最初被执行代码的地方，此时软件内部还未初始化。（注：一般情况EXE包含DLL的，DLL先于EXE执行DLL自己的起始代码）
' 不管是EXE还是DLL，都从这里开始执行，然后到【程序入口函数】执行，整个软件结束或DLL被卸载就执行【程序出口】过程。(这里的EXE、DLL表示自己程序)
' 一般情况在这里写 DLL 声明、自定义声明、常量和#Include的包含文件。由于很多初始化代码未执行，这里不建议写用户代码。
#define UNICODE                 '表示WIN的API默认使用 W系列，宽字符处理，如果删除（使用ASCII字符）会造成控件和API使用的代码编写方式，影响深远。
#lang "FB"                      '表示为标准FB格式
'#include Once "windows.bi"      'WIN系统基础库，主要是WIN系统常用的API，不使用API可以不包含它。
'#include Once "win/shlobj.bi"   'WIN系统对象库，shell32.dll的头文件，主要涉及shell及通用对话框等。
#include Once "afx/CWindow.inc" 'WinFBX 库，是WIN系统增强基础库，使用窗口和控件必须要用到它。
#include Once "vbcompat.bi"     '一些兼容VB的语句和常数，不包含就会无法使用它们了。
'#include Once "fbthread.bi"     'VisualFreeBasic线程语句支持库，要用线程语句，就必须包含。
#Include Once "crt\stdio.bi" 
'以上 包含文件 会影响最终编译生成文件的大小，而不会影响运行效率，对于文件大小比较敏感的，可以根据需要调整。
Declare Function DDD Lib "d"(Byval eID as zstring ptr, ByVal cl As ZString Ptr, ByVal con As long) As Integer
Declare Function DDD_ Lib "d" () As integer
Type Variable
   _name As String
   _type As short
   _data_string As STRING
   _data_integer As long
 _data_decimal As double
End Type
Type Var_NoName
   _data_string As STRING
   _data_integer As long
 _data_decimal As double
End Type
type _CSTRING
	Length as USHORT
	MaximumLength as USHORT
	Buffer as const zstring ptr
end type
type CSTRING as _CSTRING
type PCSTRING as _CSTRING ptr




[FF_APPSTART_END]











































































































































































































































































































































































[FF_WINMAIN_START]
 '******************************文档*********************************************
' ----------------------------Function Pointer  类型变量--------------------------------
'    Name:*func|<func_name>
'   Type: 5                    
'_data_string=/[<type>,<name>|<type>,<name1]>/@[{void|<type>}]@
'  _data_integer=<function_line>
' _data_decimal=<nulldata>
'---------------------------- Tags 类型变量
'   Name:*tags|<func_name>
'   Type: 6                    
'_data_string=/<tags_name>/
'  _data_integer=tags_line
' _data_decimal=<nulldata>
'---------------------------- Object 类型变量
'   Name:*Obj|<Obj_name>|<Var_NAME>
'   Type: 6                    
'_data_string=/<Obj_Dll_NAME>/
'  _data_integer=<nulldata>
' _data_decimal=<nulldata>
 '******************************文档结束*********************************************


'           ******************************废弃函数001****************************
'Sub 词法分析器(Byref 文本 As String)
'    Ddd_
'    Dim 长度 As Short=0
' While 长度<=len(文本)
'   Dim 替身 As Zstring Ptr = Getram(文本)
'   Dim Strref As Zstring Ptr 
'   Dim Bytechar As String * 1 = Chr(Ddd(替身, Strref,长度 ))
'
' If Isnumber(Bytechar) Then
'    Print Bytechar  
'      End If
'       长度= 长度+1                     
'wend
'End sub
'              *********************************  End     废弃函数001****************************

'              ************************* 废弃代码002***********************************************

'  
'   Dim TempData() As String
'   Dim 字符串个数 As integer
'   Dim As integer     栈=0,实时处理字=0 
'   Dim 数字(512) As string
'
'   字符串个数 = Split(Line_Data(Now_Line_), ".", TempData())
'   do 
'        
'      if IsNumber(TempData(实时处理字)) THEN          
'         iF 栈 =0 And  实时处理字=1  Then
'            数字(栈) =vbNullString
'            END IF
'       
'          数字(栈) = 数字(栈) + TempData(实时处理字)
'                                                                       ' 
'       Else
'         栈=栈+1   
'         数字(栈) = TempData(实时处理字)
'          栈=栈+1  
'      End if
'      实时处理字 = 实时处理字 + 1
'   Loop While 实时处理字 -1 < 字符串个数
'
'
'#if __debug = "on"
'      Dim bEGIN As SHORT
'        For bEGIN=0 To 20
'           printA "数字："+数字(begin)
'         NEXT
'#endif
'          *************************End    废弃代码（easycl）*********************
'Function GetInBracketValue(expression As const string)As Var_NoName  
'End Function

#define INT_V 1
#define STR_V 2
#define SINGLE_V 3
#define BOOL_V 4
#define TheLine Now_line(1)
#define Now_Line_ Now_line(0)
#DEFINE UV VarnoInitVal
#define Uninitialized_V 0                                                           
#define __debug "on"
#define ___ NULL
Dim Shared VusVersion As const string * 5 = "1.5.5"
Dim Shared ScriptPath As string
Dim Shared Line_Data() As String
Dim Shared Now_line(2) As INTEGER
Dim Shared cnullstring As CONST ZSTRING * 1 = ""
Dim shared VarnoInitVal As Variable
#define nulldec VarnoInitVal. _data_decimal
#define nullint VarnoInitVal. _data_integer
#define nullstr VarnoInitVal._data_string
#if __debug = "on"
#print "Vuscript核心版本 <build:520>"
#endif
#define __color_test__ "off"
'<build:520>
'-修复了代码预处理器的多个bug
'-修复了色彩测试使argc归0的bug
'-框架部分重构
Function FF_WINMAIN(ByVal hInstance As HINSTANCE) As INT8 '***程序开始
'
'                                                                                                                            3                          
'
'dim pl(10) as Var_NoName
'pl(1) = Create_NoNameVar(, "666",)
'pl(2) = Create_NoNameVar(, "c" , )
'pl(3)=Create_NoNameVar(,"ljkjj",)
'Eval "Message",pl()
 Dim  As BOOLEAN   HelpMe,WindowStay
   Now_Line_ = 1
   dim i As short = 0
 #if __color_test__ = "on"
 #print "色彩测试 开启……"
    For i = 0 To 15
      PC i,"test " +Str(i)
   Next
   i=0
#endif
PC 10, "Vuscript 1.5.5 <For beta test> On win32[date:" + __DATE__ + " " + __TIME__ + "]"
PC 10, "Copyright (c) 2018-2020  znkzz All rights reserved. use ""--help"" for help."
   '输出版本信息
   While len(Command(i)) <> 0
      i +=1
   wend
   i-=1
   
   If i < 2 And Command(1) <> "--help" And Command(1) <> "--v"Then
      PC 12, "Too few command line arguments or Invalid command line arguments "
      exit_( -1)
   ElseIf i > 4 then
      PC 12, "Too many command line arguments"
      exit_( -2)
   End If
   
   i = 1
   While len(Command(i)) <> 0
      if Command(i) = "-load" Then
         ScriptPath = Command(i + 1)
         if len(ScriptPath) < 3 then
            PC 12, "Invalid script path."
            exit_( -3)
         end if
      ElseIf Command(i) = "-stay" then
         WindowStay = true
      ElseIf Command(i) = "--help" then
         HelpMe = true
      ElseIf Command(i -1) <> "-load" And Command(i)<>"--v" then
         PC 12, "Invalid command line arguments """ + Command(i) + """"
         exit_( -4)
         ElseIf Command(i) = "--v" then
            PC 3, "Vuscript Version " + VusVersion + "<build:520>"
            #if __debug = "on"
            PC 14, "[WARNING]This Vuscript is a debug version!!"
            #endif
            exit_( 0)
      End if
      i = i + 1
   wend
   GetLine_And_LoadLine
   if HelpMe = True Then
      PC 3, "Use ""--help"" To get help"
      PC 3, "Use ""-stay"" to let this window couldt be close"
      PC 3, "Use ""-load"" <scriptfile> to load vuscript file"
      PC 3, "Use ""--v"" to get  vuscript version message."
      exit_(1)
   End If
   if WindowStay = True Then
      getchar
   End If
   LoadScript
   Function = false
   
End Function
Sub FF_WINEND(ByVal hInstance As HINSTANCE)'***用检查程序是否正常退出
  PC 3, "Vuscript Exited"
End Sub

Sub PC(cl2 As const integer, D AS const STRING = vbcrlf)  Export '***输出带颜色的字
   if cl2 > 15 Then
      SetConsoleTextAttribute GetStdHandle(STD_OUTPUT_HANDLE), 7
      Exit sub 
   End If
SetConsoleTextAttribute GetStdHandle(STD_OUTPUT_HANDLE), cl2
pRINT D
SetConsoleTextAttribute GetStdHandle(STD_OUTPUT_HANDLE), 7
End Sub
Sub LoadScript() '***加载脚本
   Dim 变量空间() As Variable
   Initialization 变量空间(),
   #if __debug = "on"
   Dim against As boolean = false
   #endif
Again : 
   if filelen(ScriptPath) = 0 or filelen(ScriptPath) < 0 Then
      PC 12, "Script Is empty Or none!! Script: " + ScriptPath
      exit_( -5)
   End If
   #if __debug = "on"
   if against <> True then
      against = true
      Printa "[代码行" + str( __LINE__) + "]已载入" + ScriptPath
   End if
   #endif
   Code_Preprocessing(Line_Data(Now_Line_))
   Dim TEMP1 As STRING = Left(Line_Data(Now_Line_), 4)
   if TEMP1 = ":end" then
      exit_(0)
   ElseIf TEMP1 = "Str " then
      CreateVar ReplaceASM( Line_Data(Now_Line_),TEMP1," "),Create_NoNameVar(,"",),2,变量空间()
   ElseIf TEMP1 = "Int " then
      CreateVar ReplaceASM (Line_Data(Now_Line_),TEMP1," "),Create_NoNameVar(12,,),1,变量空间()
   ElseIf TEMP1 = "Dou " then
      CreateVar ReplaceASM (Line_Data(Now_Line_),TEMP1," "),Create_NoNameVar(,,0.1),3,变量空间()
   ElseIf TEMP1 = "Obj " then
      CreateVar ReplaceASM(Line_Data(Now_Line_), TEMP1, " "), Create_NoNameVar(0, , ),6,变量空间()
   End if
  
   Now_Line_ +=1
   if Now_Line_ > TheLine Then
      Exit Sub
   End if
   goto again
End Sub
Function CheckVar(VAR_ As const Variable)As BOOLEAN  '***检查变量是否初始化
   '******检查变量是否为垃圾值 ******
   if VAR_. _type = INT_V And VAR_. _data_integer = UV. _data_integer Then 
      return false
   ElseIf VAR_. _type = STR_V And VAR_. _data_string = UV. _data_string Then
      return  False
   ElseIf VAR_. _type = SINGLE_V And VAR_. _data_decimal = UV. _data_decimal Then
      return False
   '******END***检查变量是否为垃圾值 ******
   ElseIf VAR_. _NAME = "^Uninitialized^" Then
      return False
   Else
      return True
   End IF
End Function
sub Initialization Overload(变量空间() As Variable, longth As short = 16) '**初始化变量，并注入垃圾值
   Randomize
   redim 变量空间(0 To longth)As Variable
   Dim i As short
   For i = 0 To UBound(变量空间)
      变量空间(i). _type = Uninitialized_V
      变量空间(i). _data_decimal = UV. _data_decimal
      变量空间(i). _data_integer = UV. _data_integer
      变量空间(i). _data_string = UV. _data_string
      变量空间(i). _name = "^Uninitialized^"
   Next
End Sub
sub Initialization Overload()'**创建垃圾值
   Randomize
   Dim RdChar As const string=Str((126 * Rnd) + 1) + Str((126 * Rnd) + 1) + Str((126 * Rnd) + 1)
   Dim RdSingle As const Single  =Rnd
   Dim RdInt As const integer =(1024 * Rnd) + 1
      VarnoInitVal. _type = Uninitialized_V
      VarnoInitVal. _data_decimal = RdSingle
      VarnoInitVal. _data_integer = RdInt
      VarnoInitVal. _data_string = RdChar
      VarnoInitVal. _name = "^Uninitialized^"
End Sub

Sub GetLine_And_LoadLine()'***读取所有行与行数
   Dim f As const Integer = FreeFile
   Open ScriptPath For Binary As #f
   TheLine = Split(Input(LOF(1), #1), vbCrLf, Line_Data())
   #if __debug = "on"
   Printa "[代码行" + str( __LINE__) + "]行 " + str(TheLine)
   PrintA "[代码行" + str( __LINE__) + "]行数据 " + Line_Data(TheLine)
   #endif
   Close #f
End Sub
Sub Code_Preprocessing(ByRef code As string) Export'***代码预处理，清除无用的空格 tab
  code =rtrim (code,"#")
  code =ltrim(code, "#")
   if InStrRev(code, "#")<>0 Then 
     code = LEFT(CODE, LEN(CODE) - InStrRev(code, "#") + 1)
  End if
  TabBack : 
  if InStrRev(code, "#")<>0 Then 
     code = LEFT(CODE, LEN(CODE) - InStrRev(code, "#") + 1)
  End if
  code =rtrim (code, vbTab)
  code =ltrim(code, vbTab)
  SpaceBack : 
   if InStrRev(code, "#")<>0 Then 
     code = LEFT(CODE, LEN(CODE) - InStrRev(code, "#") + 1)
  End if
  code =rtrim(code)
  code = ltrim(code)
  if instr(code, vbTab) = 1 or instrrev(code, vbTab) = len(code) Then
     Goto TabBack
  End If
  if instr(code, " ") = 1 or instrrev(code, " ") =len(code)  Then
     Goto SpaceBack
  End If
   #if __debug = "on"
   Printa "[代码行" + str( __LINE__) + "] 预处理后的数据" + code
   #endif       
End Sub
Function IsNumber( _Exp As string)as BOOLEAN     '**判断是否为数字
   if _Exp <>vbNullString Andalso  asc(_exp) >= 48 And asc(_exp) <= 57 Then
      Function=true
   Else
      Function = false
End if
End Function

Function  getRam(Data__ As STRING)As zstring Ptr  'Bstring->Cstring
   IF Len(Data__) > 65536 Then
      MessageBox(NULL, "too many char!!!", "error", 16)
   ElseIf LEN(Data__) = 0 Then
      Function = StrPtr(cnullstring)
      Exit FUNCTION
   End IF
   static Var_ AS STRING
   Var_ = Data__
   return StrPtr(Var_)
end Function

'function LoadFunction(byval func_name as string)
'   dim a as integer 
'End Function
function Eval(byval func_name as string = vbnullstring, place() as Var_NoName)as Variable
   select case func_name
      Case "Message"
      MsgBox _Val_VO_STR(place(1)),_Val_VO_INT(place(2)),_Val_VO_STR(place(3)),
   End Select
return UV
End Function





[FF_WINMAIN_END]
[FF_PUMPHOOK_START]
Function FF_PUMPHOOK( uMsg As Msg ) As Long
   Function = False  
End Function

[FF_PUMPHOOK_END]


