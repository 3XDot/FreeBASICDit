#VisualFreeBasic_Project#  Version=5.5.3
NumObjects=3
ProjectName=Dust
CompilationMode=0
CompilationDebug=0
FunNameNumber=0
CharSet=1
CodePage=936
ProjectType=GUI
UseGDIPlus=0
ShowConsole=-1
MultiLanguage=0
OmitInformation=0
UseStartupIcon=-1
StartupIcon=30001.ico|ICON_30001
UseWinXPthemes=0
StrUnicode=0
UseAdminPriv=0
DeleteGeneratedCode=-1
AddCompOps= -gen gcc -exx -O 3
LastRunFilename=Dust32.exe
ImageManager=30001.ico|ICON|0
ImageManager=
Major=1
Minor=5
Revision=5
Build=897
FileMajor=1
FileMinor=5
FileRevision=5
FileBuild=924
AutoIncrement=1
DefaultCompiler=32
Comments=
CompanyName=
FileDescription=
LegalCopyrights=
LegalTrademarks=
ProductName=

[Objects]

TopTab=#FF_WinMain#|False|0|12|860
TopTab=#FF_AppStart#|True|0|21|1852
TopTab=#FF_PumpHook#|False|0|0|0
#END_MAIN_PROPERTIES#






































































































































































[FF_APPSTART_START]
'这里是打开软件后最初被执行代码的地方，此时软件内部还未初始化。（注：一般情况EXE包含DLL的，DLL先于EXE执行DLL自己的起始代码）
' 不管是EXE还是DLL，都从这里开始执行，然后到【程序入口函数】执行，整个软件结束或DLL被卸载就执行【程序出口】过程。(这里的EXE、DLL表示自己程序)
' 一般情况在这里写 DLL 声明、自定义声明、常量和#Include的包含文件。由于很多初始化代码未执行，这里不建议写用户代码。
#define UNICODE                 '表示WIN的API默认使用 W系列，宽字符处理，如果删除（使用ASCII字符）会造成控件和API使用的代码编写方式，影响深远。
#lang "FB"                      '表示为标准FB格式
#include Once "windows.bi"      'WIN系统基础库，主要是WIN系统常用的API，不使用API可以不包含它。
#include Once "win/shlobj.bi"   'WIN系统对象库，shell32.dll的头文件，主要涉及shell及通用对话框等。
#include Once "afx/CWindow.inc" 'WinFBX 库，是WIN系统增强基础库，使用窗口和控件必须要用到它。
#include Once "vbcompat.bi"     '一些兼容VB的语句和常数，不包含就会无法使用它们了。
#include Once "fbthread.bi"     'VisualFreeBasic线程语句支持库，要用线程语句，就必须包含。
#Include Once "crt\stdio.bi" 
#define vStr 1
#define vDoub 2
#define vInte 3 
#define vEmp 0
#define __debug "on"
#define DBG (__debug="on")
#if __debug = "on"
#print "Vuscript Core version <build:520>"
#endif
#define __color_test__ "off"
#define DPrint(A) PC(4,"[DEBUG]"+(A))
#define TheLine Now_line(1)
#define Now_Line_ Now_line(0)
Type VarData
VString As String ptr
VDou As double
VInt As Integer
Declare Function GetType ()As short
End type
Type Variable
#If DBG
Declare Sub PrintData ()
#endif
Declare Sub SetData (vardata_ As VarData)
Declare Function GetData ()As string
Declare Sub ClearData( )
VName As String
VString As String ptr
VDou As Double
VInt As Integer
VType As short
End type
Type Token
begin As Long
_end As long
End type
Declare Function DUSTAPICALL Lib "WinAPICall" Alias "APICALL"(ZLNAME As String PTR,D(any) As VARDATA PTR) As  BOOLEAN
Extern "C" 
Declare Sub GetStrToken Lib "GetToken" Alias "match"(zf As zstring ptr,data1 as Token Ptr)
End Extern  
Declare SUB ver Lib "WinAPICall" Alias "DLLVER"()
Type Argv
TypeAll As short
NameArgv As String ptr
End Type

Type Func
Argvs(any) As Argv
LineBegin As short
LineEnd As Short
FuncName As String
VarObject(any) As Variable ptr
End Type
Type FileA
Funcz(any) As Func
SharedVar(any) As Variable ptr
End type
Declare Operator = ( ByRef a As Variable, ByRef b As Variable ) As BOOLEAN
Operator = ( ByRef a As Variable, ByRef b As Variable ) As BOOLEAN
  Dim aq as short=0
  If a.vname=b.vname Then aq+=1
  If a.vstring=b.vstring Then aq+=1
  If a.vint = b.vint Then aq+=1
  If a.vdou =b.vdou Then aq+=1
  If a.vtype =b.vtype Then aq+=1
Return aq=5
End Operator
Declare Operator <> ( ByRef a As Variable, ByRef b As Variable ) As BOOLEAN
Operator <> ( ByRef a As Variable, ByRef b As Variable ) As BOOLEAN
  If a.vname<>b.vname Then Return true
  If a.vstring<>b.vstring Then Return true
  If a.vint <> b.vint Then Return true
  If a.vdou <>b.vdou Then Return true
  If a.vtype <>b.vtype Then Return true
Return false
End Operator
Declare Operator = ( ByRef a As VarData, ByRef b As VarData ) As BOOLEAN
Operator = ( ByRef a As VarData, ByRef b As VarData ) As BOOLEAN
  Dim aq as short=0
  If a.vstring=b.vstring Then aq+=1
  If a.vint = b.vint Then aq+=1
  If a.vdou =b.vdou Then aq+=1
Return aq=3
End Operator
Declare Operator <> ( ByRef a As VarData, ByRef b As VarData ) As BOOLEAN
Operator <> ( ByRef a As VarData, ByRef b As VarData ) As BOOLEAN
  If a.vstring<>b.vstring Then Return true
  If a.vint <> b.vint Then Return true
  If a.vdou <>b.vdou Then Return true
Return false
End Operator
sub Variable.ClearData ( )
   THIS.VNAME="[Unused]"
   Delete This.vstring
   This.vstring=NULL
   This.vint=0
   This.vdou=0
End sub
Function VarData.GetType ( )As SHORT
If this.VString<>NULL Then
Return vStr
ElseIf this.Vint<>0 Then
Return vInte
ElseIf this.Vdou<>0.0 Then
Return vDoub
Else
Return vEmp
End if
End Function
#If DBG
Sub Variable.PrintData()

   If This.vtype = vStr Then
      printf This.vname + "::String->""" + *(This.vstring) + """" + vbcrlf 'String
      Exit sub
   End if
   If This.vtype = vDoub Then
      printf This.vname + "::Double->" + str(This.vdou) + vbcrlf 'Double
      Exit sub
   End if
   If This.vtype = vInte Then
      printf This.vname + "::Integer->" + str(This.vint) + vbcrlf 'Integer
      Exit sub
   End if
   printf This.vname + "::Empty" + vbcrlf 'Empty
End Sub
#endif
function Variable.GetData()As string
   If This.vtype = vStr Then
      If This.vstring=NULL Then RETURN "" 
      return *(This.vstring) 'String
   End if
   If This.vtype = vDoub Then
      return str(This.vdou)'Double

   End if
   If This.vtype = vInte Then
      return str(This.vint)  'Integer
   End if
    return "[Empty]" 'Empty
End function
SUB Variable.SetData(vardata_ As VarData)'***Set variable value 
this.VDou=vardata_.VDou
this.VInt=vardata_.VInt
this.VString=vardata_.VString
this.VType=vardata_.GetType
End SUB















[FF_APPSTART_END]




































































































































































































































































































































































































[FF_WINMAIN_START]
Dim Shared ScriptPath As string
Dim Shared Line_Data() As String
Dim Shared Now_line(2) As INTEGER
Function FF_WINMAIN(ByVal hInstance As HINSTANCE) As INT8 '***The beginning of the program
 'DUSTAPICALL(New String("想死"),NULL)
Dim t() AS TOKEN
ReDim t(0 To 10)
GetStrToken("(call(msgbox(Call(CStr(1))),16))",@T(0))
printf STR(T(0).begin)+" "+STR(T(0)._end)+vbcrlf
printf STR(T(1).begin)+" "+STR(T(1)._end)
#if DBG
   DPrint(vbtab + "FF_WINMAIN()" + VBTAB + "OK!")
 #endif
   #if DBG
   ''' [Note] The -1st .VInt member of the Variable variable type is used to record the size of the array
   ''' [Note] The 0th variable of Variable type is not used, for comparison 
   Dim  As Variable a(-1 to 12),b(-1 to 12)
   a(-1).VInt=12
   b(-1).VInt=12
   DPrint(vbtab + "FF_WINMAIN()->Test1" + VBTAB + "Begin")
   CreateVar(a(),"varname1")
  ' LetVar(a(1),Type<vardata>(New String("Rotting"),0.0,0))
   a(1).PrintData
   a(1).ClearData
   b(-1).PrintData
   b(-1).ClearData
   DPrint(STR(Parse("").GETTYPE))
   b(-1).PrintData
   DPrint(a(1).GetData)
   Type<Variable>.printdata

   CreateVar(a(),"varname2")
   CreateVar(b(),"varname3")
   
   DPrint(vbtab + "FF_WINMAIN()->Test1" + VBTAB + "End")
   #endif
   Dim As BOOLEAN HelpMe ,WindowStay
   Dim varspace as Short = 1024
   Now_Line_ = 1
   dim i As short = 0 ,q as short
   #if __color_test__ = "on"
   #print "Color test, on..."
   For i = 0 To 15
      PC i ,"test " + Str(i)
   Next
   
   i = 0
   #endif
   ''' Output version information

   PC 10 ,"Vuscript 2.0  On win32[date:" + __DATE__ + " " + __TIME__ + "]" + vbcrlf + "If you wanna get more information ,please type ""--help"" for help."
   

   While len(Command(i)) <> 0
      i += 1
   wend
   i -= 1
   q = i
   If i < 2 And Command(1) <> "--help" And Command(1) <> "--v" and command(1) <> "--copyright" Then
      If q = 0 Then Goto HelpMessage
      PC 12 ,"Too few command line arguments or Invalid command line arguments "
      exit_( -1)
   ElseIf i > 4 then
      PC 12 ,"Too many command line arguments"
      exit_( -2)
   End If
   i = 1
   ''' Processing each command-line argument
   While len(Command(i)) <> 0
      if Command(i) = "-load" Then
         ScriptPath = Command(i + 1)
         if len(ScriptPath) < 3 then
            PC 12 ,"Invalid script path."
            exit_( -3)
         end if
      ElseIf Command(i) = "-stay" then
         WindowStay = true
      ElseIf Command(i) = "--help" then
         HelpMe = true
      ElseIf Command(i -1) <> "-load" And Command(i) <> "--v" And Command(i) <> "--copyright" And LEFT(Command(i) ,9) <> "-varspace" then
         
         PC 12 ,"Invalid command line arguments """ + Command(i) + """"
         exit_( -4)
      ElseIf Command(i) = "--v" then
         PC 3 ,"<build:520>"
         ver
         #if DBG
         DPrint("This Vuscript is a debug version!!")
         #endif
         exit_(0)
      ElseIf Command(i) = "--copyright" then
         PC 10 ,"Copyright (c) 2018-2020 znkzz<R.I.P> All rights reserved."
         PC 10 ,"Copyright (c) 2021 object-a All rights reserved."
        exit_(0)
      ElseIf LEFT(Command(i) ,9) = "-varspace" then
         Dim ret() as string
         Split(Command(i) ,"=" ,ret())
         varspace = cint(ret(2))
         ''' [Note]: the ret (0) is the string used to hold the array size.
         ''' [Note]: This is the difference from Visual Basic.
      End if
      
      i = i + 1
   wend
   GetLine_And_LoadLine
   if HelpMe = True Then
HelpMessage : 
      PC 3 ,"Use ""--help"" To get help"
      PC 3 ,"Use ""-stay"" to let this window couldt be close"
      PC 3 ,"Use ""-load"" <scriptfile> to load vuscript file"
      PC 3 ,"Use ""--v"" to get  vuscript version message."
      PC 3 ,"Use ""--copyright"" To get copyright messages."
      PC 3 ,"Use ""-varspace=<size>"" To set the varible zone size."
      exit_(1)
   End If
   
   #if DBG
   DPrint(vbtab + "FF_WINMAIN()->varspace=" + Str(varspace))
   #endif
   LoadScript(varspace)
   if WindowStay = True Then
      getchar
   End If
   Function = false
End function
   
Sub FF_WINEND(ByVal hInstance As HINSTANCE) '***Check if the program exits properly
End Sub

Sub PC(cl2 As const integer, D AS const STRING = vbcrlf)   '***Outputs text of the specified color
  if cl2 > 15 Then
  SetConsoleTextAttribute GetStdHandle(STD_OUTPUT_HANDLE), 7
   Exit sub
  End If
  SetConsoleTextAttribute GetStdHandle(STD_OUTPUT_HANDLE), cl2
  printf  D+vbCrLf
 
  SetConsoleTextAttribute GetStdHandle(STD_OUTPUT_HANDLE), 7
End Sub
Sub LoadScript( size As const integer) '***Loading scripts
   #if DBG
   DPrint(vbtab + "LoadScript()->file="+ScriptPath)
   #endif
Dim VariableSpace() as Variable
ReDim VariableSpace(-1 To size)
VariableSpace(-1).VInt=size
If  Filelen(ScriptPath)=0 Then
printf "can't find file:"+ScriptPath+",and this program will stop."
DeleteFile ScriptPath
Exit_(2)
End if
Dim RTL as short
End Sub
Sub GetLine_And_LoadLine() '***Reads the string for each line and records the total number of lines
   #if DBG
   DPrint(vbtab + "LoadScript()->file="+ScriptPath)
   #endif
   Dim f As const Integer = FreeFile
   Open ScriptPath For Binary As #f
   TheLine = Split(Input(LOF(1), #1), vbCrLf, Line_Data())
   Close #f
End Sub
Sub CreateVar(zone() As Variable,varname As const string)'***Create a variable in zone() 
   #if DBG
   DPrint(vbtab + "CreateVar()->zone(-1).VInt="+Str(zone(-1).VInt))
   #endif
dim i as integer
''' [Note] Check for duplicate names 
For i=1 To zone(-1).VInt
if zone(i).VName =varname Then
   #if DBG
   DPrint(vbtab + "CreateVar()->Same Name:"+varname)
   exit_(3)
   #endif
End if
next

For i=1 To zone(-1).VInt
if zone(i)=zone(0) then
   zone(i).VName=varname
   #if DBG
   DPrint(vbtab + "CreateVar()->"+varname+vbtab+"OK!")
   #endif
Exit sub
End if
next
End sub
function GetVar(zone() As Variable,sname As string)As Variable '***get variable value 
Dim i as integer
For i=1 To zone(-1).VInt
if zone(i).VName=sname then
   #if DBG
   DPrint(vbtab + "GetVar()->"+sname+vbtab+"OK!")
   #endif
   Return zone(i)
End if
next
#if DBG
 DPrint(vbtab + "GetVar()->"+sname+vbtab+"Failed!")
#endif
End function
function Parse(obj As string)As VarData'**Parse String To VarData
If InStr(obj,"'")<>0 and InStrrev(obj,"'")<>0 then
Return Type<VarData>(New STRING(OBJ),0,0.0)
ElseIf InStr(obj,".")<>0  then
Return Type<vardata>(NULL,Val(obj),0)
ElseIf obj=str(cint(obj)) then
Return Type<vardata>(NULL,0.0,CInt(obj))
Else
Return Type<vardata>(NULL,0.0,0)
End if
End function
Function Evaluate(obj As string)As any ptr
'Empty
Return NULL
End function





[FF_WINMAIN_END]
[FF_PUMPHOOK_START]
Function FF_PUMPHOOK( uMsg As Msg ) As Long
   Function = False  
End Function
[FF_PUMPHOOK_END]
